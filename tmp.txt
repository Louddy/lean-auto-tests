`/home/indprinciples/.elan/toolchains/leanprover--lean4---v4.18.0/bin/lake setup-file /home/indprinciples/Research/lean-auto/Auto.lean Init Auto.Tactic Auto.EvaluateAuto.TestAuto Auto.EvaluateAuto.TestTactics Auto.EvaluateAuto.TestTranslation` failed:

stderr:
ℹ [38/233] Replayed Auto.Translation.Inductive
info: ././././Auto/Translation/Inductive.lean:175:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Bool, Ctors : [false : Bool, true : Bool] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ List Bool, Ctors : [[] : List Bool, List.cons : Bool → List Bool → List Bool] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Array Bool, Ctors : [Array.mk : List Bool → Array Bool], Projs : [Array.toList] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ List Nat, Ctors : [[] : List Nat, List.cons : Nat → List Nat → List Nat] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Array Nat, Ctors : [Array.mk : List Nat → Array Nat], Projs : [Array.toList] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:176:2: SimpleIndVal ⦗⦗ Array Bool ×
  Array Nat, Ctors : [Prod.mk : Array Bool → Array Nat → Array Bool × Array Nat], Projs : [Prod.fst, Prod.snd] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:190:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:190:2: SimpleIndVal ⦗⦗ tree, Ctors : [tree.leaf : Nat → tree, tree.node : treelist → tree] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:190:2: SimpleIndVal ⦗⦗ treelist, Ctors : [treelist.nil : treelist, treelist.cons : tree → treelist → treelist] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ Nat, Ctors : [Nat.zero : Nat, Nat.succ : Nat → Nat] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ Int, Ctors : [Int.ofNat : Nat → Int, Int.negSucc : Nat → Int] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ Tree Int, Ctors : [Tree.leaf : Int → Tree Int, Tree.node : TreeList Int → Tree Int] ⦘⦘
info: ././././Auto/Translation/Inductive.lean:204:2: SimpleIndVal ⦗⦗ TreeList
  Int, Ctors : [TreeList.nil : TreeList Int, TreeList.cons : Tree Int → TreeList Int → TreeList Int] ⦘⦘
⚠ [54/233] Replayed Auto.Lib.NatExtra
warning: ././././Auto/Lib/NatExtra.lean:242:12: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Lib/NatExtra.lean:243:38: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Lib/NatExtra.lean:256:34: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
⚠ [74/233] Replayed Auto.Lib.Pos
warning: ././././Auto/Lib/Pos.lean:43:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Lib/Pos.lean:56:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [84/233] Replayed Auto.Lib.BinTree
warning: ././././Auto/Lib/BinTree.lean:33:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Lib/BinTree.lean:120:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Lib/BinTree.lean:201:8: unused variable `h`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Lib/BinTree.lean:601:15: `List.get?` has been deprecated: Use `a[i]?` instead.
⚠ [92/233] Replayed Auto.IR.SMT
warning: ././././Auto/IR/SMT.lean:149:22: `List.get?` has been deprecated: Use `a[i]?` instead.
✔ [119/233] Built Auto.Translation.Assumptions
⚠ [122/233] Built Auto.Embedding.LCtx
warning: ././././Auto/Embedding/LCtx.lean:726:4: `List.get?` has been deprecated: Use `a[i]?` instead.
✔ [123/233] Built Auto.Translation.ReifM
✔ [126/233] Built Auto.Embedding.LCtx:c.o
✔ [127/233] Built Auto.Solver.Native
✔ [130/233] Built Auto.Embedding.LCtx:dynlib
✔ [131/233] Built Auto.Translation.Inhabitation
✔ [134/233] Built Auto.Translation.Preprocessing
✔ [137/233] Built Auto.Parser.NDFA
⚠ [140/233] Built Auto.Parser.LeanLex
warning: ././././Auto/Parser/LeanLex.lean:159:10: unused variable `s`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [143/233] Built Auto.Parser.LexInit
✔ [146/233] Built Auto.Parser.SMTSexp
⚠ [149/233] Built Auto.Translation.Monomorphization
warning: ././././Auto/Translation/Monomorphization.lean:338:79: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [150/233] Built Auto.Solver.SMT
⚠ [155/233] Built Auto.Embedding.LamBase
warning: ././././Auto/Embedding/LamBase.lean:3432:43: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Embedding/LamBase.lean:3433:43: unused variable `n`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Embedding/LamBase.lean:3658:11: unused variable `argTy`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Embedding/LamBase.lean:3658:18: unused variable `arg`
note: this linter can be disabled with `set_option linter.unusedVariables false`
warning: ././././Auto/Embedding/LamBase.lean:3942:2: unused variable `lctxTy`
note: this linter can be disabled with `set_option linter.unusedVariables false`
✔ [156/233] Built Auto.Embedding.LamBase:c.o
✔ [157/233] Built Auto.Embedding.LamBase:dynlib
✔ [158/233] Built Auto.Embedding.LamInhReasoning
✔ [159/233] Built Auto.Embedding.LamInhReasoning:c.o
✔ [160/233] Built Auto.Embedding.LamInhReasoning:dynlib
✔ [161/233] Built Auto.Embedding.LamBVarOp
ℹ [162/233] Built Auto.Translation.LamUtils
info: ././././Auto/Translation/LamUtils.lean:458:0: LT.lt : BitVec 3 → BitVec 3 → Prop
✔ [163/233] Built Auto.Embedding.LamBVarOp:c.o
✔ [164/233] Built Auto.Embedding.LamBVarOp:dynlib
✔ [165/233] Built Auto.Translation.LamUtils:c.o
✔ [166/233] Built Auto.Translation.LamUtils:dynlib
⚠ [167/233] Built Auto.Parser.TPTP
warning: ././././Auto/Parser/TPTP.lean:852:17: unused variable `name`
note: this linter can be disabled with `set_option linter.unusedVariables false`
⚠ [168/233] Built Auto.Embedding.LamSystem
warning: ././././Auto/Embedding/LamSystem.lean:1638:10: `List.length_eq_zero` has been deprecated: use `List.length_eq_zero_iff` instead
✔ [169/233] Built Auto.Embedding.LamSystem:c.o
✔ [170/233] Built Auto.Embedding.LamSystem:dynlib
⚠ [171/233] Built Auto.Embedding.LamTermInterp
warning: ././././Auto/Embedding/LamTermInterp.lean:164:7: `List.get?` has been deprecated: Use `a[i]?` instead.
warning: ././././Auto/Embedding/LamTermInterp.lean:166:52: `List.get?_eq_some_iff` has been deprecated: Use `a[i]?` instead.
warning: ././././Auto/Embedding/LamTermInterp.lean:167:54: `List.get?_eq_getElem?` has been deprecated: Use `a[i]?` instead.
warning: ././././Auto/Embedding/LamTermInterp.lean:201:49: `List.get?` has been deprecated: Use `a[i]?` instead.
warning: ././././Auto/Embedding/LamTermInterp.lean:203:45: `List.get?_eq_some_iff` has been deprecated: Use `a[i]?` instead.
warning: ././././Auto/Embedding/LamTermInterp.lean:204:54: `List.get?_eq_getElem?` has been deprecated: Use `a[i]?` instead.
✔ [172/233] Built Auto.Embedding.LamTermInterp:c.o
✔ [173/233] Built Auto.Embedding.LamTermInterp:dynlib
✔ [174/233] Built Auto.Embedding.LamLCtx
✔ [175/233] Built Auto.Embedding.LamLCtx:c.o
✔ [176/233] Built Auto.Embedding.LamLCtx:dynlib
✔ [177/233] Built Auto.Parser.TPTP:c.o
✔ [178/233] Built Auto.Parser.TPTP:dynlib
✔ [179/233] Built Auto.Embedding.LamConv
✔ [180/233] Built Auto.Embedding.LamConv:c.o
✔ [181/233] Built Auto.Embedding.LamConv:dynlib
✔ [182/233] Built Auto.Embedding.LamInductive
✔ [183/233] Built Auto.IR.TPTP_TH0
✔ [184/233] Built Auto.Embedding.LamInductive:c.o
✔ [185/233] Built Auto.Embedding.LamInductive:dynlib
✔ [186/233] Built Auto.IR.TPTP_TH0:c.o
✔ [187/233] Built Auto.IR.TPTP_TH0:dynlib
⚠ [188/233] Built Auto.Translation.Lam2TH0
warning: ././././Auto/Translation/Lam2TH0.lean:28:21: `Array.get?` has been deprecated: Use `a[i]?` instead.
warning: ././././Auto/Translation/Lam2TH0.lean:32:21: `Array.get?` has been deprecated: Use `a[i]?` instead.
✔ [189/233] Built Auto.Translation.Lam2TH0:c.o
✔ [190/233] Built Auto.Translation.Lam2TH0:dynlib
✔ [191/233] Built Auto.Solver.TPTP
✔ [192/233] Built Auto.Embedding.LamInference
✔ [193/233] Built Auto.Embedding.LamInference:c.o
✔ [194/233] Built Auto.Embedding.LamInference:dynlib
✔ [195/233] Built Auto.Solver.TPTP:c.o
✔ [196/233] Built Auto.Solver.TPTP:dynlib
✖ [197/233] Building Auto.Embedding.LamBitVec
trace: .> LEAN_PATH=././.lake/build/lib/lean /home/indprinciples/.elan/toolchains/leanprover--lean4---v4.18.0/bin/lean ././././Auto/Embedding/LamBitVec.lean -R ./././. -o ././.lake/build/lib/lean/Auto/Embedding/LamBitVec.olean -i ././.lake/build/lib/lean/Auto/Embedding/LamBitVec.ilean -c ././.lake/build/ir/Auto/Embedding/LamBitVec.c --plugin ././.lake/build/lib/lean/Auto_Lib_IsomType.so --plugin ././.lake/build/lib/lean/Auto_Lib_StringExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_BoolExtra.so --plugin ././.lake/build/lib/lean/Auto_Embedding_Lift.so --plugin ././.lake/build/lib/lean/Auto_Lib_HEqExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_NatExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_ListExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_HList.so --plugin ././.lake/build/lib/lean/Auto_MathlibEmulator_Basic.so --plugin ././.lake/build/lib/lean/Auto_MathlibEmulator_ToLevel.so --plugin ././.lake/build/lib/lean/Auto_MathlibEmulator_DeriveToExpr.so --plugin ././.lake/build/lib/lean/Auto_MathlibEmulator_ToExpr.so --plugin ././.lake/build/lib/lean/Auto_MathlibEmulator.so --plugin ././.lake/build/lib/lean/Auto_Lib_OptionExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_Containers.so --plugin ././.lake/build/lib/lean/Auto_Lib_Pos.so --plugin ././.lake/build/lib/lean/Auto_Lib_ToExprExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_BinTree.so --plugin ././.lake/build/lib/lean/Auto_Embedding_LCtx.so --plugin ././.lake/build/lib/lean/Auto_Lib_LevelExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_AbstractMVars.so --plugin ././.lake/build/lib/lean/Auto_Lib_ExprExtra.so --plugin ././.lake/build/lib/lean/Auto_Lib_IntExtra.so --plugin ././.lake/build/lib/lean/Auto_Embedding_LamBase.so --plugin ././.lake/build/lib/lean/Auto_Embedding_LamBVarOp.so --plugin ././.lake/build/lib/lean/Auto_Embedding_LamSystem.so --plugin ././.lake/build/lib/lean/Auto_Embedding_LamConv.so --json
warning: ././././Auto/Embedding/LamBitVec.lean:12:63: `BitVec.ofNatLt` has been deprecated: use `BitVec.ofNatLT` instead
warning: ././././Auto/Embedding/LamBitVec.lean:69:37: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Embedding/LamBitVec.lean:96:37: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Embedding/LamBitVec.lean:101:37: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Embedding/LamBitVec.lean:134:45: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
error: ././././Auto/Embedding/LamBitVec.lean:135:30: tactic 'rewrite' failed, did not find instance of the pattern in the target expression
  (BitVec.ofNatLt ?i ?p).toNat
case h
n : Nat
a : BitVec n
i : Nat
h : i ≥ n
hmsb : a.msb = true
hzero : (2 ^ n - a.toNat - 1) >>> i = 0
⊢ ((Int.negSucc ((2 ^ n - a.toNat - 1) >>> i) % ↑(2 ^ n)).toNat#'⋯).toNat = (-1#n).toNat
warning: ././././Auto/Embedding/LamBitVec.lean:149:60: `BitVec.ofNatLt` has been deprecated: use `BitVec.ofNatLT` instead
error: ././././Auto/Embedding/LamBitVec.lean:150:22: tactic 'rewrite' failed, motive is not type correct:
  fun _a => ↑(_a#'⋯).toFin = 0 ↔ a < 2 ^ b
Error: application type mismatch
  _a#'⋯
argument
  ushiftRight.proof_1 { toFin := ⟨a, isLt⟩ } b
has type
  { toFin := ⟨a, isLt⟩ }.toNat >>> b < 2 ^ n : Prop
but is expected to have type
  _a < 2 ^ n : Prop

Explanation: The rewrite tactic rewrites an expression 'e' using an equality 'a = b' by the following process. First, it looks for all 'a' in 'e'. Second, it tries to abstract these occurrences of 'a' to create a function 'm := fun _a => ...', called the *motive*, with the property that 'm a' is definitionally equal to 'e'. Third, we observe that 'congrArg' implies that 'm a = m b', which can be used with lemmas such as 'Eq.mpr' to change the goal. However, if 'e' depends on specific properties of 'a', then the motive 'm' might not typecheck.

Possible solutions: use rewrite's 'occs' configuration option to limit which occurrences are rewritten, or use 'simp' or 'conv' mode, which have strategies for certain kinds of dependencies (these tactics can handle proofs and 'Decidable' instances whose types depend on the rewritten term, and 'simp' can apply user-defined '@[congr]' theorems as well).
case ofFin.mk
n b a : Nat
isLt : a < 2 ^ n
⊢ ↑((a >>> b)#'⋯).toFin = 0 ↔ a < 2 ^ b
warning: ././././Auto/Embedding/LamBitVec.lean:210:37: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Embedding/LamBitVec.lean:253:37: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
warning: ././././Auto/Embedding/LamBitVec.lean:298:37: `Nat.pow_le_pow_of_le_right` has been deprecated: use `Nat.pow_le_pow_right` instead
error: Lean exited with code 1
✔ [200/233] Built Auto.Embedding.LamPrep
✔ [232/233] Built Auto.Embedding.LamPrep:c.o
✔ [233/233] Built Auto.Embedding.LamPrep:dynlib
Some required builds logged failures:
- Auto.Embedding.LamBitVec
error: build failed